В данном упражнении необходимо реализовать стековую машину, то есть алгоритм, проводящий вычисления по обратной польской записи.

Обратная польская нотация или постфиксная нотация — форма записи математических и логических выражений, в которой операнды расположены перед знаками операций. Выражение читается слева направо. Когда в выражении встречается знак операции, выполняется соответствующая операция над двумя ближайшими операндами, находящимися слева от знака операции. Результат операции заменяет в выражении последовательность её операндов и знак, после чего выражение вычисляется дальше по тому же правилу. Таким образом, результатом вычисления всего выражения становится результат последней вычисленной операции.

Например, выражение (1 + 2) * 4 + 3 в постфиксной нотации будет выглядеть так: 1 2 + 4 * 3 +, а результат вычисления: 15. Другой пример - выражение: 7 - 2 * 3, в постфиксной нотации: 7 2 3 * -, результат: 1.

solution.js
Реализуйте функцию calcInPolishNotation, которая принимает массив, каждый элемент которого содержит число или знак операции (+, -, *, /). Функция должна вернуть результат вычисления по обратной польской записи. Экспортируйте функцию по умолчанию.

calcInPolishNotation([1, 2, '+', 4, '*', 3, '+']); // 15
calcInPolishNotation([7, 2, 3, '*', '-']); // 1


const countNumber = (num2, num1, num) => {
  let result = 0;
  if (num === '+') {
    result = num2 + num1;
  } else if (num === '-') {
    result = num2 - num1;
  } else if (num === '*') {
    result = num2 * num1;
  } else {
    result = num2 / num1;
  }
  return result;
};

const calcInPolishNotation = (arr) => {
  const newArr = arr.slice();
  let newArr1 = 0;
  let preResult = 0;
  for (let i = 0; i < newArr.length; i += 1) {
    if (typeof newArr[i] !== 'number') {
      if (newArr1 === 0) {
        preResult = countNumber(newArr[i - 2], newArr[i - 1], newArr[i]);
        newArr1 += preResult;
      } else if (typeof newArr[i - 1] === 'number') {
        preResult = countNumber(newArr1, newArr[i - 1], newArr[i]);
        newArr1 = preResult;
      } else {
        preResult = countNumber(newArr[0], newArr1, newArr[i]);
        newArr1 = preResult;
      }
    }
  }
  return newArr1;
};
export default calcInPolishNotation;
